*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"Input exceeds maximum value %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}

declare i32 @__isoc99_scanf(ptr noundef, ...) #1

declare i32 @printf(ptr noundef, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"Input exceeds maximum value %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}

declare i32 @__isoc99_scanf(ptr noundef, ...) #1

declare i32 @printf(ptr noundef, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Expand large div/rem (expand-large-div-rem) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Expand large div/rem (expand-large-div-rem) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Expand large fp convert (expand-large-fp-convert) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Expand large fp convert (expand-large-fp-convert) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %31

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

31:                                               ; preds = %17, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

; Loop:
17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

; Exit blocks
.loopexit:                                        ; preds = %17
  br label %31
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

; Loop:
17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

; Exit blocks
.loopexit:                                        ; preds = %17
  br label %31
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

; Loop:
17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

; Exit blocks
.loopexit:                                        ; preds = %17
  br label %31
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

; Loop:
17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

; Exit blocks
.loopexit:                                        ; preds = %17
  br label %31
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Expand memcmp() to load/stores (expand-memcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Expand memcmp() to load/stores (expand-memcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before TLS Variable Hoist (tlshoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After TLS Variable Hoist (tlshoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Exception handling preparation (dwarf-eh-prepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Exception handling preparation (dwarf-eh-prepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Prepare callbr (callbrprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Prepare callbr (callbrprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  store i32 0, ptr %2, align 4
  store i32 1, ptr %3, align 4
  store i32 1, ptr %4, align 4
  %7 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef @.str, ptr noundef %6)
  %8 = load i32, ptr %6, align 4
  %9 = icmp sgt i32 %8, 50
  br i1 %9, label %10, label %12

10:                                               ; preds = %0
  %11 = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef 50)
  store i32 1, ptr %1, align 4
  br label %31

12:                                               ; preds = %0
  %13 = load i32, ptr %2, align 4
  %14 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %13)
  %15 = load i32, ptr %3, align 4
  %16 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %15)
  br label %17

17:                                               ; preds = %21, %12
  %18 = load i32, ptr %4, align 4
  %19 = load i32, ptr %6, align 4
  %20 = icmp slt i32 %18, %19
  br i1 %20, label %21, label %.loopexit

21:                                               ; preds = %17
  %22 = load i32, ptr %3, align 4
  store i32 %22, ptr %5, align 4
  %23 = load i32, ptr %2, align 4
  %24 = load i32, ptr %3, align 4
  %25 = add nsw i32 %23, %24
  store i32 %25, ptr %3, align 4
  %26 = load i32, ptr %3, align 4
  %27 = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef %26)
  %28 = load i32, ptr %5, align 4
  store i32 %28, ptr %2, align 4
  %29 = load i32, ptr %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, ptr %4, align 4
  br label %17, !llvm.loop !6

.loopexit:                                        ; preds = %17
  br label %31

31:                                               ; preds = %.loopexit, %10
  %32 = load i32, ptr %1, align 4
  ret i32 %32
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (x86-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection (x86-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Argument Stack Rebase (x86argumentstackrebase) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Argument Stack Rebase (x86argumentstackrebase) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  %3:gr32 = COPY $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
288B	  %33:gr32 = MOV32ri 50
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = COPY %33:gr32
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %34:gr32 = COPY $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  %10:gr32 = COPY $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %6:gr32 = COPY $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
880B	  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
896B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
912B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
928B	  %21:gr64 = MOV64ri @.str.2
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  %23:gr32 = COPY $eax
1056B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1072B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1088B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1104B	  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
1120B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1136B	  JMP_1 %bb.3

1152B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1168B	  JMP_1 %bb.6

1184B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1200B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1216B	  $eax = COPY %36:gr32
1232B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  %3:gr32 = COPY $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
288B	  %33:gr32 = MOV32ri 50
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = COPY %33:gr32
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  %34:gr32 = COPY $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  %10:gr32 = COPY $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  %6:gr32 = COPY $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
880B	  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
896B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
912B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
928B	  %21:gr64 = MOV64ri @.str.2
944B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
960B	  $rdi = COPY %21:gr64
976B	  $esi = COPY %24:gr32
992B	  $al = MOV8ri 0
1008B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1024B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1040B	  %23:gr32 = COPY $eax
1056B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1072B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1088B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1104B	  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
1120B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1136B	  JMP_1 %bb.3

1152B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1168B	  JMP_1 %bb.6

1184B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1200B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1216B	  $eax = COPY %36:gr32
1232B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Pre-configure (tilepreconfig) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tile Register Pre-configure (tilepreconfig) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %1:gr64
  $rsi = COPY %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %32:gr64
  $esi = COPY %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %34:gr32 = COPY $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %8:gr64
  $esi = COPY %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %10:gr32 = COPY $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %4:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = COPY $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %21:gr64
  $esi = COPY %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %23:gr32 = COPY $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY %36:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $rsi = COPY killed %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %32:gr64
  $esi = COPY killed %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %34:gr32 = COPY killed $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %10:gr32 = COPY killed $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm killed %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %21:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %23:gr32 = COPY killed $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri killed %18:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %36:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $rsi = COPY killed %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %32:gr64
  $esi = COPY killed %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %34:gr32 = COPY killed $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %10:gr32 = COPY killed $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm killed %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %21:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %23:gr32 = COPY killed $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri killed %18:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %36:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $rsi = COPY killed %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %32:gr64
  $esi = COPY killed %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %34:gr32 = COPY killed $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %10:gr32 = COPY killed $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm killed %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %21:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %23:gr32 = COPY killed $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri killed %18:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %36:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $rsi = COPY killed %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %32:gr64
  $esi = COPY killed %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %34:gr32 = COPY killed $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %10:gr32 = COPY killed $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = ADD32rm killed %29:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %21:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %23:gr32 = COPY killed $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = ADD32ri killed %18:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %36:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $rsi = COPY killed %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %32:gr64
  $esi = COPY killed %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %34:gr32 = COPY killed $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %10:gr32 = COPY killed $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = COPY killed %29:gr32
  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %21:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %23:gr32 = COPY killed $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = COPY killed %18:gr32
  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %36:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  %1:gr64 = MOV64ri @.str
  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %1:gr64
  $rsi = COPY killed %2:gr64
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  %32:gr64 = MOV64ri @.str.1
  %33:gr32 = MOV32ri 50
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %32:gr64
  $esi = COPY killed %33:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %34:gr32 = COPY killed $eax
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %8:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %8:gr64
  $esi = COPY killed %11:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %10:gr32 = COPY killed $eax
  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %4:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %4:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %6:gr32 = COPY killed $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %31:gr32 :: (store (s32) into %ir.5)
  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  %28:gr32 = COPY killed %29:gr32
  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %28:gr32 :: (store (s32) into %ir.3)
  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  %21:gr64 = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %21:gr64
  $esi = COPY killed %24:gr32
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %23:gr32 = COPY killed $eax
  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.2)
  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %17:gr32 = COPY killed %18:gr32
  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %17:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  $eax = COPY killed %36:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY killed %1:gr64
144B	  $rsi = COPY killed %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
288B	  %33:gr32 = MOV32ri 50
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY killed %32:gr64
336B	  $esi = COPY killed %33:gr32
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY killed %8:gr64
528B	  $esi = COPY killed %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY killed %4:gr64
672B	  $esi = COPY killed %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm killed %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %31:gr32 :: (store (s32) into %ir.5)
864B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
880B	  %28:gr32 = COPY killed %29:gr32
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY killed %21:gr64
992B	  $esi = COPY killed %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.2)
1104B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1120B	  %17:gr32 = COPY killed %18:gr32
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY killed %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY killed %1:gr64
144B	  $rsi = COPY killed %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
288B	  %33:gr32 = MOV32ri 50
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY killed %32:gr64
336B	  $esi = COPY killed %33:gr32
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY killed %8:gr64
528B	  $esi = COPY killed %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY killed %4:gr64
672B	  $esi = COPY killed %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm killed %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %31:gr32 :: (store (s32) into %ir.5)
864B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
880B	  %28:gr32 = COPY killed %29:gr32
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY killed %21:gr64
992B	  $esi = COPY killed %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %20:gr32 :: (store (s32) into %ir.2)
1104B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1120B	  %17:gr32 = COPY killed %18:gr32
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY killed %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
288B	  %33:gr32 = MOV32ri 50
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = COPY %33:gr32
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
880B	  %28:gr32 = COPY %29:gr32
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1120B	  %17:gr32 = COPY %18:gr32
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Register Coalescer (register-coalescer) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
288B	  %33:gr32 = MOV32ri 50
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = COPY %33:gr32
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
880B	  %28:gr32 = COPY %29:gr32
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %18:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1120B	  %17:gr32 = COPY %18:gr32
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Register Coalescer (register-coalescer) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY killed $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY killed $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY killed $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY killed $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY killed $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  %1:gr64 = MOV64ri @.str
96B	  %2:gr64 = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  $rdi = COPY %1:gr64
144B	  $rsi = COPY %2:gr64
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %3:gr32 = COPY $eax
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  %32:gr64 = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
320B	  $rdi = COPY %32:gr64
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  dead %34:gr32 = COPY $eax
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  %11:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  %8:gr64 = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
512B	  $rdi = COPY %8:gr64
528B	  $esi = COPY %11:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %10:gr32 = COPY $eax
608B	  %7:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  %4:gr64 = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %4:gr64
672B	  $esi = COPY %7:gr32
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
736B	  dead %6:gr32 = COPY $eax

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  %14:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm %14:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  %31:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %31:gr32 :: (store (s32) into %ir.5)
864B	  %28:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  %28:gr32 = ADD32rm %28:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %28:gr32 :: (store (s32) into %ir.3)
928B	  %24:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  %21:gr64 = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
976B	  $rdi = COPY %21:gr64
992B	  $esi = COPY %24:gr32
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1056B	  dead %23:gr32 = COPY $eax
1072B	  %20:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %20:gr32 :: (store (s32) into %ir.2)
1104B	  %17:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  %17:gr32 = ADD32ri %17:gr32(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %17:gr32 :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  %36:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1248B	  $eax = COPY %36:gr32
1264B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  renamable $rdi = MOV64ri @.str
96B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  renamable $rdi = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  renamable $rdi = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  renamable $rdi = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
864B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
928B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  renamable $rdi = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
1104B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1264B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  renamable $rdi = MOV64ri @.str
96B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  renamable $rdi = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  renamable $rdi = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  renamable $rdi = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
864B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
928B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  renamable $rdi = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
1104B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1264B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  renamable $rdi = MOV64ri @.str
96B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  renamable $rdi = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  renamable $rdi = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  renamable $rdi = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
864B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
928B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  renamable $rdi = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
1104B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1264B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  renamable $rdi = MOV64ri @.str
96B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  renamable $rdi = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  renamable $rdi = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  renamable $rdi = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
864B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
928B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  renamable $rdi = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
1104B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1264B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  renamable $rdi = MOV64ri @.str
96B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  renamable $rdi = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  renamable $rdi = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  renamable $rdi = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
864B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
928B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  renamable $rdi = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
1104B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1264B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.2, %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
80B	  renamable $rdi = MOV64ri @.str
96B	  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
240B	  JCC_1 %bb.2, 14, implicit killed $eflags

256B	bb.1 (%ir-block.10):
	; predecessors: %bb.0
	  successors: %bb.6

272B	  renamable $rdi = MOV64ri @.str.1
304B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
336B	  $esi = MOV32ri 50
352B	  $al = MOV8ri 0
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
416B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
432B	  JMP_1 %bb.6

448B	bb.2 (%ir-block.12):
	; predecessors: %bb.0
	  successors: %bb.3

464B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
480B	  renamable $rdi = MOV64ri @.str.2
496B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
624B	  renamable $rdi = MOV64ri @.str.2
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
688B	  $al = MOV8ri 0
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

752B	bb.3 (%ir-block.17):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.5, %bb.4

768B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
784B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
800B	  JCC_1 %bb.5, 13, implicit killed $eflags

816B	bb.4 (%ir-block.21):
	; predecessors: %bb.3
	  successors: %bb.3

832B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
848B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
864B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
896B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
912B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
928B	  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
944B	  renamable $rdi = MOV64ri @.str.2
960B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1008B	  $al = MOV8ri 0
1024B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
1040B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
1072B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
1088B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
1104B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
1136B	  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
1152B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
1168B	  JMP_1 %bb.3

1184B	bb.5..loopexit:
	; predecessors: %bb.3
	  successors: %bb.6

1200B	  JMP_1 %bb.6

1216B	bb.6 (%ir-block.31):
	; predecessors: %bb.5, %bb.1

1232B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
1264B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r %stack.5, 1, $noreg, 0, $noreg
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.5, 1, $noreg, 0, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load (s32) from %ir.5)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %ir.1)
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Late Instructions Cleanup Pass (machine-latecleanup) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Late Instructions Cleanup Pass (machine-latecleanup) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert KCFI indirect call checks (kcfi) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert KCFI indirect call checks (kcfi) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs when possible (x86-compress-evex) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs when possible (x86-compress-evex) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Sanitizer Binary Metadata (machine-sanmd) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Sanitizer Binary Metadata (machine-sanmd) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Frame Layout Analysis (stack-frame-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Frame Layout Analysis (stack-frame-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Return Thunks (x86-return-thunks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Return Thunks (x86-return-thunks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-12]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-32]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.2, %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  frame-setup CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store (s32) into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store (s32) into %ir.4)
  renamable $rdi = MOV64ri @.str
  renamable $rsi = LEA64r $rbp, 1, $noreg, -16, $noreg
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $rsi, implicit-def $eax
  CMP32mi $rbp, 1, $noreg, -16, $noreg, 50, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.2, 14, implicit killed $eflags

bb.1 (%ir-block.10):
; predecessors: %bb.0
  successors: %bb.6

  renamable $rdi = MOV64ri @.str.1
  $esi = MOV32ri 50
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  MOV32mi $rbp, 1, $noreg, -20, $noreg, 1 :: (store (s32) into %ir.1)
  JMP_1 %bb.6

bb.2 (%ir-block.12):
; predecessors: %bb.0
  successors: %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax

bb.3 (%ir-block.17):
; predecessors: %bb.2, %bb.4
  successors: %bb.5, %bb.4

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (load (s32) from %ir.6)
  JCC_1 %bb.5, 13, implicit killed $eflags

bb.4 (%ir-block.21):
; predecessors: %bb.3
  successors: %bb.3

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -24, $noreg, killed renamable $eax :: (store (s32) into %ir.5)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.2)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -4, $noreg, implicit-def dead $eflags :: (load (s32) from %ir.3)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -24, $noreg :: (load (s32) from %ir.5)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.2)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.3

bb.5..loopexit:
; predecessors: %bb.3
  successors: %bb.6

  JMP_1 %bb.6

bb.6 (%ir-block.31):
; predecessors: %bb.5, %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -20, $noreg :: (load (s32) from %ir.1)
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

