
;; Function main (main, funcdef_no=0, decl_uid=3174, cgraph_uid=1, symbol_order=0)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;;
;; Loop 1
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;; 2 succs { 3 4 }
;; 3 succs { 8 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 8 }
;; 8 succs { 1 }
main.c:22: printf: objsize = 9223372036854775807, fmtstr = "%d
"
  Directive 1 at offset 0: "%d"
    Result: 1, 1, 1, 1 (1, 1, 1, 1)
  Directive 2 at offset 2: "
", length = 1
    Result: 1, 1, 1, 1 (2, 2, 2, 2)
  Directive 3 at offset 3: "", length = 1
main.c:23: printf: objsize = 9223372036854775807, fmtstr = "%d
"
  Directive 1 at offset 0: "%d"
    Result: 1, 1, 1, 1 (1, 1, 1, 1)
  Directive 2 at offset 2: "
", length = 1
    Result: 1, 1, 1, 1 (2, 2, 2, 2)
  Directive 3 at offset 3: "", length = 1
main.c:30: printf: objsize = 9223372036854775807, fmtstr = "%d
"
  Directive 1 at offset 0: "%d"
    Result: 1, 1, 11, 11 (1, 1, 11, 11)
  Directive 2 at offset 2: "
", length = 1
    Result: 1, 1, 1, 1 (2, 2, 12, 12)
  Directive 3 at offset 3: "", length = 1
main.c:18: printf: objsize = 9223372036854775807, fmtstr = "Input exceeds maximum value %d
"
  Directive 1 at offset 0: "Input exceeds maximum value ", length = 28
    Result: 28, 28, 28, 28 (28, 28, 28, 28)
  Directive 2 at offset 28: "%d"
    Result: 2, 2, 2, 2 (30, 30, 30, 30)
  Directive 3 at offset 30: "
", length = 1
    Result: 1, 1, 1, 1 (31, 31, 31, 31)
  Directive 4 at offset 31: "", length = 1
int main ()
{
  int n;
  int t;
  int i;
  int b;
  int a;
  int D.3187;
  int n.0_1;
  int n.1_2;
  int _6;
  int _17;
  int _24;

  <bb 2> :
  a_9 = 0;
  b_10 = 1;
  i_11 = 1;
  scanf ("%d", &n);
  n.0_1 = n;
  if (n.0_1 > 50)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  printf ("Input exceeds maximum value %d\n", 50);
  _24 = 1;
  // predicted unlikely by early return (on trees) predictor.
  n ={v} {CLOBBER(eol)};
  goto <bb 8>; [INV]

  <bb 4> :
  printf ("%d\n", a_9);
  printf ("%d\n", b_10);
  goto <bb 6>; [INV]

  <bb 5> :
  t_18 = b_4;
  b_19 = a_3 + b_4;
  printf ("%d\n", b_19);
  a_21 = t_18;
  i_22 = i_5 + 1;

  <bb 6> :
  # a_3 = PHI <a_9(4), a_21(5)>
  # b_4 = PHI <b_10(4), b_19(5)>
  # i_5 = PHI <i_11(4), i_22(5)>
  n.1_2 = n;
  if (i_5 < n.1_2)
    goto <bb 5>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 7> :
  n ={v} {CLOBBER(eol)};
  _17 = 0;

  <bb 8> :
  # _6 = PHI <_24(3), _17(7)>
<L7>:
  return _6;

}


